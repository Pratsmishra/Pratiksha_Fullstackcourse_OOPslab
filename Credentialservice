import java.security.SecureRandom;

class Employee {
    private String firstName;
    private String lastName;
    private String department;

    public Employee(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getDepartment() {
        return department;
    }
}

class CredentialService {
    private static final String COMPANY = "company.com";
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*";
    private static final SecureRandom random = new SecureRandom();

    public String generateRandomPassword() {
        StringBuilder password = new StringBuilder();

        // Generate at least one number
        password.append((char) ('0' + random.nextInt(10)));

        // Generate at least one capital letter
        password.append((char) ('A' + random.nextInt(26)));

        // Generate at least one small letter
        password.append((char) ('a' + random.nextInt(26)));

        // Generate at least one special character
        password.append(SPECIAL_CHARACTERS.charAt(random.nextInt(SPECIAL_CHARACTERS.length())));

        // Generate the remaining characters randomly
        for (int i = 4; i < 12; i++) { // Password length is 12 (4 required characters + 8 random characters)
            int characterType = random.nextInt(4); // 0 for number, 1 for capital letter, 2 for small letter, 3 for special character
            char nextChar;

            switch (characterType) {
                case 0:
                    nextChar = (char) ('0' + random.nextInt(10));
                    break;
                case 1:
                    nextChar = (char) ('A' + random.nextInt(26));
                    break;
                case 2:
                    nextChar = (char) ('a' + random.nextInt(26));
                    break;
                case 3:
                    nextChar = SPECIAL_CHARACTERS.charAt(random.nextInt(SPECIAL_CHARACTERS.length()));
                    break;
                default:
                    nextChar = ' ';
            }

            password.append(nextChar);
        }

        // Shuffle the password to randomize character positions
        String shuffledPassword = shufflePassword(password.toString());

        return shuffledPassword;
    }

    public String generateEmailAddress(Employee employee) {
        String email = employee.getFirstName().toLowerCase() +
                       employee.getLastName().toLowerCase() +
                       "@" + employee.getDepartment().toLowerCase() +
                       "." + COMPANY;
        return email;
    }

    public void showCredentials(Employee employee) {
        String email = generateEmailAddress(employee);
        String password = generateRandomPassword();

        System.out.println("Employee Name: " + employee.getFirstName() + " " + employee.getLastName());
        System.out.println("Department: " + employee.getDepartment());
        System.out.println("Email Address: " + email);
        System.out.println("Password: " + password);
    }

    private String shufflePassword(String password) {
        char[] passwordChars = password.toCharArray();
        for (int i = passwordChars.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            char temp = passwordChars[index];
            passwordChars[index] = passwordChars[i];
            passwordChars[i] = temp;
        }
        return new String(passwordChars);
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of CredentialService
        CredentialService credentialService = new CredentialService();

        // Create new Employee objects using parameterized constructor
        Employee employee1 = new Employee("John", "Doe");
        employee1.setDepartment("Technical");

        Employee employee2 = new Employee("Jane", "Smith");
        employee2.setDepartment("Admin");

        // Display generated credentials using CredentialService
        System.out.println("Employee 1 Credentials:");
        credentialService.showCredentials(employee1);

        System.out.println("\nEmployee 2 Credentials:");
        credentialService.showCredentials(employee2);
    }
}
